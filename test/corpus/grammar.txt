==================
Grammar simple
==================

Verb 'eat' * held -> Eat;

-----

(source_file
    (grammar
        (string_single_quoted)
        (grammar_clause
            (identifier)
            (identifier)
        )
    )
)

==================
Grammar token options
==================

Verb 'yum' * 'eat'/'devour'/'guzzle' held -> Eat;

-----

(source_file
    (grammar
        (string_single_quoted)
        (grammar_clause
            (string_single_quoted)
            (string_single_quoted)
             (string_single_quoted)
            (identifier)
            (identifier)
        )
    )
)


==================
Grammar token with routine
==================

Verb 'free' 'release' * noun=CagedCreature -> FreeAnimal;

(source_file
    (grammar
        (string_single_quoted)
        (string_single_quoted)
        (grammar_clause
            (identifier)
            (identifier)
        )
    )
)

==================
Grammar token with multiple clauses
==================

Verb 'use' 'employ' 'utilise'
    * edible -> Eat
    * clothing -> Wear
    * enterable -> Enter;

-----

(source_file
    (grammar
        (string_single_quoted)
        (string_single_quoted)
        (string_single_quoted)
        (grammar_clause
            (identifier)
            (identifier)
        )
        (grammar_clause
            (identifier)
            (identifier)
        )
        (grammar_clause
            (identifier)
            (identifier)
        )
    )
)

==================
Grammar token with double quoted string
==================

Verb "burst" "pop" "prick" "stab" "pierce"
     * noun -> Burst;

-----

(source_file
    (grammar
    (string_double_quoted)
    (string_double_quoted)
    (string_double_quoted)
    (string_double_quoted)
    (string_double_quoted)
    (grammar_clause
        (identifier))))


==================
Grammar token with single identifier
==================

Verb "write"    * QuotedText -> Write;

-----

(source_file
    (grammar
    (string_double_quoted)
    (grammar_clause
        (identifier)
        (identifier))))
